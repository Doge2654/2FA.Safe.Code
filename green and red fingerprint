#include <Adafruit_Fingerprint.h>

#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)
  // 对于 UNO 和其他没有硬件序列号的，我们必须使用软件序列号...
  // 引脚 #2 是传感器的 IN（绿线）
  // 引脚 #3 从 arduino 输出（白线）
  // 设置串行端口以使用 softwareserial..
  SoftwareSerial mySerial(2, 3);
#else
  // 在 Leonardo/M0/etc 上，其他带有硬件序列号的，请使用 hardware serial！
  // #0 为绿线，#1 为白线
  #define mySerial Serial1
#endif

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

#define GREEN_LED_PIN 12  // 绿灯引脚
#define RED_LED_PIN 13    // 红灯引脚

void setup() {
  Serial.begin(9600);
  while (!Serial);  // 用于 Yun/Leo/Micro/Zero 等...
  delay(100);
  Serial.println("\n\nAdafruit Fingerprint Test");

  // 设置传感器串行端口的数据速率
  finger.begin(57600);
  delay(5);

  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Fingerprint sensor not found :(");
    while (1) { delay(1); }
  }

  pinMode(GREEN_LED_PIN, OUTPUT);  // 设置绿灯引脚为输出
  pinMode(RED_LED_PIN, OUTPUT);    // 设置红灯引脚为输出

  Serial.println(F("Reading sensor parameters"));
  finger.getParameters();
  Serial.print(F("Status: 0x")); Serial.println(finger.status_reg, HEX);
  Serial.print(F("System ID: 0x")); Serial.println(finger.system_id, HEX);
  Serial.print(F("Capacity: ")); Serial.println(finger.capacity);
  Serial.print(F("Security Level: ")); Serial.println(finger.security_level);
  Serial.print(F("Device Address: ")); Serial.println(finger.device_addr, HEX);
  Serial.print(F("Packet Length: ")); Serial.println(finger.packet_len);
  Serial.print(F("Baud Rate: ")); Serial.println(finger.baud_rate);

  finger.getTemplateCount();

  if (finger.templateCount == 0) {
    Serial.print("Sensor contains no fingerprint data. Please run 'enroll' example.");
  } else {
    Serial.println("Waiting for valid finger...");
    Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  }
}

void loop() {
  getFingerprintID();
  delay(50);  // 无需全速运行
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image captured");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // 图像转换
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Fingerprint features not found");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Invalid image");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // 搜索指纹
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a matching fingerprint!");
    digitalWrite(GREEN_LED_PIN, HIGH);  // 正确匹配时点亮绿灯
    delay(7000);  // 绿灯亮7秒
    digitalWrite(GREEN_LED_PIN, LOW);   // 熄灭绿灯
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("No matching fingerprint found");
    digitalWrite(RED_LED_PIN, HIGH);    // 错误时点亮红灯
    delay(7000);  // 红灯亮7秒
    digitalWrite(RED_LED_PIN, LOW);     // 熄灭红灯
  } else {
    Serial.println("Unknown error");
    return p;
  }

  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence "); Serial.println(finger.confidence);

  return finger.fingerID;
}

