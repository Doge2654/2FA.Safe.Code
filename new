#include <Adafruit_Fingerprint.h>

#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)
// For UNO and others without hardware serial, we must use software serial...
// pin #2 is IN from sensor (GREEN wire)
// pin #3 is OUT from arduino  (WHITE wire)
// Set up the serial port to use softwareserial..
SoftwareSerial mySerial(2, 3);
#else
// On Leonardo/M0/etc, others with hardware serial, use hardware serial!
// #0 is green wire, #1 is white
#define mySerial Serial1
#endif

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

const int LEDPIN = 13;     // LED 引脚
const int BUZZERPIN = 11;  // 蜂鸣器引脚

// 设置密码
String pasword1 = "12345";  // 你可以替换为任何密码
String pasword2 = "";  // 当前输入的密码
int p = 0;  // 当前输入密码的长度

// 4x4 键盘的行列定义
const int ROW1 = 9;
const int ROW2 = 8;
const int ROW3 = 7;
const int ROW4 = 6;
const int COL1 = 5;
const int COL2 = 4;
const int COL3 = 3;
const int COL4 = 2;

// 定义按键值
char keys[4][4] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

bool passwordCorrect = false;  // 密码是否正确
bool fingerprintCorrect = false;  // 指纹是否正确

void setup() {
  Serial.begin(9600);
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

  pinMode(LEDPIN, OUTPUT);  // 设置 LED 为输出
  pinMode(BUZZERPIN, OUTPUT);  // 设置蜂鸣器为输出

  // 设置行引脚为输出，列引脚为输入
  pinMode(ROW1, OUTPUT);
  pinMode(ROW2, OUTPUT);
  pinMode(ROW3, OUTPUT);
  pinMode(ROW4, OUTPUT);

  pinMode(COL1, INPUT_PULLUP);
  pinMode(COL2, INPUT_PULLUP);
  pinMode(COL3, INPUT_PULLUP);
  pinMode(COL4, INPUT_PULLUP);

  // 初始将所有行设为 HIGH
  digitalWrite(ROW1, HIGH);
  digitalWrite(ROW2, HIGH);
  digitalWrite(ROW3, HIGH);
  digitalWrite(ROW4, HIGH);

  // 初始关闭 LED 和蜂鸣器
  digitalWrite(LEDPIN, LOW);
  digitalWrite(BUZZERPIN, LOW);

  Serial.println("Please enter password:");
}

void loop() {
  // 扫描键盘
  scanKeypad();

  // 检测指纹
  getFingerprintID();

  // 检查密码和指纹是否正确
  if (passwordCorrect && fingerprintCorrect) {
    // 密码和指纹都正确，点亮 LED
    digitalWrite(LEDPIN, HIGH);
    delay(5000);  // LED 亮 5 秒
    digitalWrite(LEDPIN, LOW);
    passwordCorrect = false;  // 重置状态
    fingerprintCorrect = false;
  } else if (!passwordCorrect || !fingerprintCorrect) {
    // 密码或指纹错误，LED 闪烁
    for (int i = 0; i < 5; i++) {
      digitalWrite(LEDPIN, HIGH);
      delay(500);
      digitalWrite(LEDPIN, LOW);
      delay(500);
    }
  }
}

void scanKeypad() {
  // 扫描每一行
  for (int i = 0; i < 4; i++) {
    // 将当前行拉低，其他行保持 HIGH
    digitalWrite(ROW1, HIGH);
    digitalWrite(ROW2, HIGH);
    digitalWrite(ROW3, HIGH);
    digitalWrite(ROW4, HIGH);

    if (i == 0) digitalWrite(ROW1, LOW);
    if (i == 1) digitalWrite(ROW2, LOW);
    if (i == 2) digitalWrite(ROW3, LOW);
    if (i == 3) digitalWrite(ROW4, LOW);

    // 检测列是否有按键按下
    if (digitalRead(COL1) == LOW) {
      keyPressed(i, 0);
      delay(200); // 防抖动延时
    }
    if (digitalRead(COL2) == LOW) {
      keyPressed(i, 1);
      delay(200);
    }
    if (digitalRead(COL3) == LOW) {
      keyPressed(i, 2);
      delay(200);
    }
    if (digitalRead(COL4) == LOW) {
      keyPressed(i, 3);
      delay(200);
    }
  }
}

void keyPressed(int row, int col) {
  // 获取按键值
  char key = keys[row][col];
  Serial.print("Key pressed: ");
  Serial.println(key);

  // 只有在按下 * 和 # 以外的键时才将其添加到密码中
  if (key != '*' && key != '#') {
    pasword2 += key;  // 将按键值添加到输入的密码中
    Serial.println("Current password input: " + pasword2);  // 打印当前输入的密码
  }

  // 如果按下 * 键，确认输入的密码
  if (key == '*') {
    if (pasword2 == pasword1) {
      // 如果密码正确
      Serial.println("Password correct!");
      passwordCorrect = true;
    } else {
      // 如果密码错误
      Serial.println("Incorrect password!");
      passwordCorrect = false;
    }
    pasword2 = "";  // 清空输入密码
  }

  // 如果按下#键，清除输入的密码
  if (key == '#') {
    pasword2 = "";  // 清空密码
    Serial.println("Password input cleared.");
  }
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK success!
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
    fingerprintCorrect = true;
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    fingerprintCorrect = false;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);

  return finger.fingerID;
}
